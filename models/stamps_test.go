// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStamps(t *testing.T) {
	t.Parallel()

	query := Stamps()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStampsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stamp{}
	if err = randomize.Struct(seed, o, stampDBTypes, true, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Stamps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStampsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stamp{}
	if err = randomize.Struct(seed, o, stampDBTypes, true, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Stamps().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Stamps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStampsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stamp{}
	if err = randomize.Struct(seed, o, stampDBTypes, true, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StampSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Stamps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStampsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stamp{}
	if err = randomize.Struct(seed, o, stampDBTypes, true, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StampExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Stamp exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StampExists to return true, but got false.")
	}
}

func testStampsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stamp{}
	if err = randomize.Struct(seed, o, stampDBTypes, true, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	stampFound, err := FindStamp(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if stampFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStampsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stamp{}
	if err = randomize.Struct(seed, o, stampDBTypes, true, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Stamps().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStampsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stamp{}
	if err = randomize.Struct(seed, o, stampDBTypes, true, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Stamps().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStampsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	stampOne := &Stamp{}
	stampTwo := &Stamp{}
	if err = randomize.Struct(seed, stampOne, stampDBTypes, false, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}
	if err = randomize.Struct(seed, stampTwo, stampDBTypes, false, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stampOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stampTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Stamps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStampsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	stampOne := &Stamp{}
	stampTwo := &Stamp{}
	if err = randomize.Struct(seed, stampOne, stampDBTypes, false, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}
	if err = randomize.Struct(seed, stampTwo, stampDBTypes, false, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stampOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stampTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stamps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func stampBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Stamp) error {
	*o = Stamp{}
	return nil
}

func stampAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Stamp) error {
	*o = Stamp{}
	return nil
}

func stampAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Stamp) error {
	*o = Stamp{}
	return nil
}

func stampBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Stamp) error {
	*o = Stamp{}
	return nil
}

func stampAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Stamp) error {
	*o = Stamp{}
	return nil
}

func stampBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Stamp) error {
	*o = Stamp{}
	return nil
}

func stampAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Stamp) error {
	*o = Stamp{}
	return nil
}

func stampBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Stamp) error {
	*o = Stamp{}
	return nil
}

func stampAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Stamp) error {
	*o = Stamp{}
	return nil
}

func testStampsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Stamp{}
	o := &Stamp{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, stampDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Stamp object: %s", err)
	}

	AddStampHook(boil.BeforeInsertHook, stampBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	stampBeforeInsertHooks = []StampHook{}

	AddStampHook(boil.AfterInsertHook, stampAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	stampAfterInsertHooks = []StampHook{}

	AddStampHook(boil.AfterSelectHook, stampAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	stampAfterSelectHooks = []StampHook{}

	AddStampHook(boil.BeforeUpdateHook, stampBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	stampBeforeUpdateHooks = []StampHook{}

	AddStampHook(boil.AfterUpdateHook, stampAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	stampAfterUpdateHooks = []StampHook{}

	AddStampHook(boil.BeforeDeleteHook, stampBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	stampBeforeDeleteHooks = []StampHook{}

	AddStampHook(boil.AfterDeleteHook, stampAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	stampAfterDeleteHooks = []StampHook{}

	AddStampHook(boil.BeforeUpsertHook, stampBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	stampBeforeUpsertHooks = []StampHook{}

	AddStampHook(boil.AfterUpsertHook, stampAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	stampAfterUpsertHooks = []StampHook{}
}

func testStampsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stamp{}
	if err = randomize.Struct(seed, o, stampDBTypes, true, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stamps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStampsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stamp{}
	if err = randomize.Struct(seed, o, stampDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(stampColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Stamps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStampToOnePersonUsingPerson(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Stamp
	var foreign Person

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, stampDBTypes, true, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PersonID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Person().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := StampSlice{&local}
	if err = local.L.LoadPerson(ctx, tx, false, (*[]*Stamp)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Person == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Person = nil
	if err = local.L.LoadPerson(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Person == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStampToOneSetOpPersonUsingPerson(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Stamp
	var b, c Person

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stampDBTypes, false, strmangle.SetComplement(stampPrimaryKeyColumns, stampColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Person{&b, &c} {
		err = a.SetPerson(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Person != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Stamps[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PersonID, x.ID) {
			t.Error("foreign key was wrong value", a.PersonID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PersonID))
		reflect.Indirect(reflect.ValueOf(&a.PersonID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PersonID, x.ID) {
			t.Error("foreign key was wrong value", a.PersonID, x.ID)
		}
	}
}

func testStampToOneRemoveOpPersonUsingPerson(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Stamp
	var b Person

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stampDBTypes, false, strmangle.SetComplement(stampPrimaryKeyColumns, stampColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPerson(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePerson(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Person().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Person != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PersonID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Stamps) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testStampsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stamp{}
	if err = randomize.Struct(seed, o, stampDBTypes, true, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStampsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stamp{}
	if err = randomize.Struct(seed, o, stampDBTypes, true, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StampSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStampsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stamp{}
	if err = randomize.Struct(seed, o, stampDBTypes, true, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Stamps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	stampDBTypes = map[string]string{`ID`: `bigint`, `Createdat`: `timestamp without time zone`, `Updatedat`: `timestamp without time zone`, `PersonID`: `bigint`, `Checkin`: `boolean`, `Stamp`: `timestamp without time zone`}
	_            = bytes.MinRead
)

func testStampsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(stampPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(stampAllColumns) == len(stampPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Stamp{}
	if err = randomize.Struct(seed, o, stampDBTypes, true, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stamps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stampDBTypes, true, stampPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStampsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(stampAllColumns) == len(stampPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Stamp{}
	if err = randomize.Struct(seed, o, stampDBTypes, true, stampColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stamps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stampDBTypes, true, stampPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(stampAllColumns, stampPrimaryKeyColumns) {
		fields = stampAllColumns
	} else {
		fields = strmangle.SetComplement(
			stampAllColumns,
			stampPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StampSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStampsUpsert(t *testing.T) {
	t.Parallel()

	if len(stampAllColumns) == len(stampPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Stamp{}
	if err = randomize.Struct(seed, &o, stampDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Stamp: %s", err)
	}

	count, err := Stamps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, stampDBTypes, false, stampPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Stamp struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Stamp: %s", err)
	}

	count, err = Stamps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
